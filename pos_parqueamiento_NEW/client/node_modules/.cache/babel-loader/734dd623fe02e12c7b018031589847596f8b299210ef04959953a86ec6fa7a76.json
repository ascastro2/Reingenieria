{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\Documents\\\\GitHub\\\\Reingenieria\\\\pos_parqueamiento_NEW\\\\client\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth debe ser usado dentro de un AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Usuario de prueba para desarrollo\n  const usuarioPrueba = {\n    id: 1,\n    email: 'admin@parqueamiento.com',\n    nombre: 'Administrador',\n    apellido: 'Sistema',\n    rol: 'admin'\n  };\n\n  // Verificar si hay un token guardado al cargar la aplicación\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      // Configurar el token en axios\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n      // Verificar si el token es válido\n      verifyToken();\n    } else {\n      setLoading(false);\n    }\n\n    // Configurar interceptor para agregar token a todas las peticiones\n    const requestInterceptor = axios.interceptors.request.use(config => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n\n    // Limpiar interceptor al desmontar\n    return () => {\n      axios.interceptors.request.eject(requestInterceptor);\n    };\n  }, []);\n  const verifyToken = async () => {\n    try {\n      const response = await axios.get('/api/auth/verify');\n      setUser(response.data.user);\n    } catch (error) {\n      // Token inválido, limpiar localStorage\n      localStorage.removeItem('token');\n      delete axios.defaults.headers.common['Authorization'];\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      // Para desarrollo, simular login exitoso\n      if (email === 'admin@parqueamiento.com' && password === 'admin123') {\n        // Simular token válido para desarrollo\n        const token = 'dev_token_' + Date.now();\n        localStorage.setItem('token', token);\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n        setUser(usuarioPrueba);\n        return;\n      }\n\n      // En producción, usar la API real\n      const response = await axios.post('/api/auth/login', {\n        email,\n        password\n      });\n      const {\n        token,\n        user: userData\n      } = response.data.data;\n\n      // Guardar token en localStorage\n      localStorage.setItem('token', token);\n\n      // Configurar token en axios\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n      // Actualizar estado del usuario\n      setUser(userData);\n    } catch (error) {\n      var _error$response, _error$response$data;\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Error en el inicio de sesión');\n    }\n  };\n  const logout = async () => {\n    try {\n      // Llamar al endpoint de logout si es necesario\n      await axios.post('/api/auth/logout');\n    } catch (error) {\n      console.error('Error en logout:', error);\n    } finally {\n      // Limpiar estado local\n      localStorage.removeItem('token');\n      delete axios.defaults.headers.common['Authorization'];\n      setUser(null);\n    }\n  };\n  const updateUser = userData => {\n    if (user) {\n      setUser({\n        ...user,\n        ...userData\n      });\n    }\n  };\n  const value = {\n    user,\n    isAuthenticated: !!user,\n    loading,\n    login,\n    logout,\n    updateUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","usuarioPrueba","id","email","nombre","apellido","rol","token","localStorage","getItem","defaults","headers","common","verifyToken","requestInterceptor","interceptors","request","use","config","Authorization","error","Promise","reject","eject","response","get","data","removeItem","login","password","Date","now","setItem","post","userData","_error$response","_error$response$data","logout","console","updateUser","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Asus/Documents/GitHub/Reingenieria/pos_parqueamiento_NEW/client/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport axios from 'axios';\r\n\r\ninterface User {\r\n  id: number;\r\n  email: string;\r\n  nombre: string;\r\n  apellido: string;\r\n  rol: 'admin' | 'vendedor' | 'cajero';\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  isAuthenticated: boolean;\r\n  loading: boolean;\r\n  login: (email: string, password: string) => Promise<void>;\r\n  logout: () => Promise<void>;\r\n  updateUser: (userData: Partial<User>) => void;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth debe ser usado dentro de un AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Usuario de prueba para desarrollo\r\n  const usuarioPrueba: User = {\r\n    id: 1,\r\n    email: 'admin@parqueamiento.com',\r\n    nombre: 'Administrador',\r\n    apellido: 'Sistema',\r\n    rol: 'admin'\r\n  };\r\n\r\n  // Verificar si hay un token guardado al cargar la aplicación\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      // Configurar el token en axios\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n      \r\n      // Verificar si el token es válido\r\n      verifyToken();\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n\r\n    // Configurar interceptor para agregar token a todas las peticiones\r\n    const requestInterceptor = axios.interceptors.request.use(\r\n      (config) => {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n          config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n      },\r\n      (error) => {\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n\r\n    // Limpiar interceptor al desmontar\r\n    return () => {\r\n      axios.interceptors.request.eject(requestInterceptor);\r\n    };\r\n  }, []);\r\n\r\n  const verifyToken = async () => {\r\n    try {\r\n      const response = await axios.get('/api/auth/verify');\r\n      setUser(response.data.user);\r\n    } catch (error) {\r\n      // Token inválido, limpiar localStorage\r\n      localStorage.removeItem('token');\r\n      delete axios.defaults.headers.common['Authorization'];\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const login = async (email: string, password: string) => {\r\n    try {\r\n      // Para desarrollo, simular login exitoso\r\n      if (email === 'admin@parqueamiento.com' && password === 'admin123') {\r\n        // Simular token válido para desarrollo\r\n        const token = 'dev_token_' + Date.now();\r\n        localStorage.setItem('token', token);\r\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n        setUser(usuarioPrueba);\r\n        return;\r\n      }\r\n\r\n      // En producción, usar la API real\r\n      const response = await axios.post('/api/auth/login', { email, password });\r\n      const { token, user: userData } = response.data.data;\r\n      \r\n      // Guardar token en localStorage\r\n      localStorage.setItem('token', token);\r\n      \r\n      // Configurar token en axios\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n      \r\n      // Actualizar estado del usuario\r\n      setUser(userData);\r\n    } catch (error: any) {\r\n      throw new Error(error.response?.data?.error || 'Error en el inicio de sesión');\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      // Llamar al endpoint de logout si es necesario\r\n      await axios.post('/api/auth/logout');\r\n    } catch (error) {\r\n      console.error('Error en logout:', error);\r\n    } finally {\r\n      // Limpiar estado local\r\n      localStorage.removeItem('token');\r\n      delete axios.defaults.headers.common['Authorization'];\r\n      setUser(null);\r\n    }\r\n  };\r\n\r\n  const updateUser = (userData: Partial<User>) => {\r\n    if (user) {\r\n      setUser({ ...user, ...userData });\r\n    }\r\n  };\r\n\r\n  const value: AuthContextType = {\r\n    user,\r\n    isAuthenticated: !!user,\r\n    loading,\r\n    login,\r\n    logout,\r\n    updateUser,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}